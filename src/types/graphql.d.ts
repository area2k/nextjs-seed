export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A properly formatted email address */
  Email: string;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: string;
  /** An Int with a value >= 0 */
  NonNegativeInt: number;
  /** A nil value */
  Void: void;
};

/** Device */
export type Device = HasTimestamps & Node & {
  __typename: 'Device';
  client: Scalars['String'];
  clientVersion: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  expiresAt: Scalars['NonNegativeInt'];
  id: Scalars['ID'];
  ip: Maybe<Scalars['String']>;
  lastIssued: Scalars['String'];
  lastIssuedAt: Scalars['ISO8601DateTime'];
  updatedAt: Scalars['ISO8601DateTime'];
  user: User;
  userAgent: Scalars['String'];
};

/** Autogenerated return type of DeviceRefreshToken */
export type DeviceRefreshTokenPayload = {
  __typename: 'DeviceRefreshTokenPayload';
  accessToken: Maybe<Scalars['String']>;
  problem: Maybe<DeviceRefreshTokenProblem>;
  refreshToken: Maybe<Scalars['String']>;
};

/** Represents a problem with the deviceRefreshToken mutation */
export type DeviceRefreshTokenProblem = Problem & {
  __typename: 'DeviceRefreshTokenProblem';
  code: DeviceRefreshTokenProblemCode;
  /** A human-readable description of the problem */
  message: Scalars['String'];
  /** A path to the argument that caused the problem, may be empty */
  path: Array<Scalars['String']>;
};

/** Problem code for the deviceRefreshToken mutation */
export type DeviceRefreshTokenProblemCode =
  /** Occurs when a device is no longer able to be refreshed */
  | 'DEVICE_EXPIRED'
  /** Occurs when the given refreshToken is invalid */
  | 'INVALID_TOKEN';


/** An object with creation and update timestamps */
export type HasTimestamps = {
  createdAt: Scalars['ISO8601DateTime'];
  updatedAt: Scalars['ISO8601DateTime'];
};


export type LocaleEnum =
  | 'US_ENGLISH';

/** Autogenerated return type of Login */
export type LoginPayload = {
  __typename: 'LoginPayload';
  accessToken: Scalars['String'];
  refreshToken: Scalars['String'];
  user: User;
};

/** The mutation root of this schema */
export type Mutation = {
  __typename: 'Mutation';
  /** Exchange a refresh token for a new access token */
  deviceRefreshToken: DeviceRefreshTokenPayload;
  /** Obtain access tokens with user credentials */
  login: LoginPayload;
  /** Allow a user matching the given email to reset their password */
  userForgotPassword: Maybe<Scalars['Void']>;
  /** Reset password of user matching the given token */
  userResetPassword: UserResetPasswordPayload;
};


/** The mutation root of this schema */
export type MutationDeviceRefreshTokenArgs = {
  refreshToken: Scalars['String'];
};


/** The mutation root of this schema */
export type MutationLoginArgs = {
  email: Scalars['Email'];
  password: Scalars['String'];
};


/** The mutation root of this schema */
export type MutationUserForgotPasswordArgs = {
  email: Scalars['Email'];
};


/** The mutation root of this schema */
export type MutationUserResetPasswordArgs = {
  password: Scalars['String'];
  token: Scalars['String'];
};

/** An object with an ID */
export type Node = {
  id: Scalars['ID'];
};


/** An object that represents a mutation problem */
export type Problem = {
  /** A human-readable description of the problem */
  message: Scalars['String'];
  /** A path to the argument that caused the problem, may be empty */
  path: Array<Scalars['String']>;
};

/** The query root of this schema */
export type Query = {
  __typename: 'Query';
  foo: Maybe<Scalars['ID']>;
};

/** User */
export type User = HasTimestamps & Node & {
  __typename: 'User';
  createdAt: Scalars['ISO8601DateTime'];
  devices: Array<Device>;
  email: Scalars['Email'];
  firstName: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lastName: Maybe<Scalars['String']>;
  locale: LocaleEnum;
  passwordStale: Maybe<Scalars['Boolean']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

/** Autogenerated return type of UserResetPassword */
export type UserResetPasswordPayload = {
  __typename: 'UserResetPasswordPayload';
  problem: Maybe<UserResetPasswordProblem>;
};

/** Represents a problem with the userResetPassword mutation */
export type UserResetPasswordProblem = Problem & {
  __typename: 'UserResetPasswordProblem';
  code: UserResetPasswordProblemCode;
  /** A human-readable description of the problem */
  message: Scalars['String'];
  /** A path to the argument that caused the problem, may be empty */
  path: Array<Scalars['String']>;
};

/** Problem code for the userResetPassword mutation */
export type UserResetPasswordProblemCode =
  /** Occurs when the given token is invalid */
  | 'INVALID_TOKEN';


export type RefreshDeviceMutationVariables = Exact<{
  refreshToken: Scalars['String'];
}>;


export type RefreshDeviceMutation = (
  { __typename: 'Mutation' }
  & { deviceRefreshToken: (
    { __typename: 'DeviceRefreshTokenPayload' }
    & Pick<DeviceRefreshTokenPayload, 'accessToken' | 'refreshToken'>
    & { problem: Maybe<(
      { __typename: 'DeviceRefreshTokenProblem' }
      & Pick<DeviceRefreshTokenProblem, 'code' | 'message' | 'path'>
    )> }
  ) }
);

export type ForgotPasswordMutationVariables = Exact<{
  email: Scalars['Email'];
}>;


export type ForgotPasswordMutation = (
  { __typename: 'Mutation' }
  & Pick<Mutation, 'userForgotPassword'>
);

export type ResetPasswordMutationVariables = Exact<{
  password: Scalars['String'];
  token: Scalars['String'];
}>;


export type ResetPasswordMutation = (
  { __typename: 'Mutation' }
  & { userResetPassword: (
    { __typename: 'UserResetPasswordPayload' }
    & { problem: Maybe<(
      { __typename: 'UserResetPasswordProblem' }
      & Pick<UserResetPasswordProblem, 'code' | 'message' | 'path'>
    )> }
  ) }
);
