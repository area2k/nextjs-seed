"""
Device
"""
type Device implements HasTimestamps & Node {
  client: String!
  clientVersion: String!
  createdAt: ISO8601DateTime!
  expiresAt: NonNegativeInt!
  id: ID!
  ip: String
  lastIssued: String!
  lastIssuedAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  user: User!
  userAgent: String!
}

"""
Autogenerated return type of DeviceRefreshToken
"""
type DeviceRefreshTokenPayload {
  accessToken: String
  problem: DeviceRefreshTokenProblem
  refreshToken: String
}

"""
Represents a problem with the deviceRefreshToken mutation
"""
type DeviceRefreshTokenProblem implements Problem {
  code: DeviceRefreshTokenProblemCode!

  """
  A human-readable description of the problem
  """
  message: String!

  """
  A path to the argument that caused the problem, may be empty
  """
  path: [String!]!
}

"""
Problem code for the deviceRefreshToken mutation
"""
enum DeviceRefreshTokenProblemCode {
  """
  Occurs when a device is no longer able to be refreshed
  """
  DEVICE_EXPIRED

  """
  Occurs when the given refreshToken is invalid
  """
  INVALID_TOKEN
}

"""
A properly formatted email address
"""
scalar Email

"""
An object with creation and update timestamps
"""
interface HasTimestamps {
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

enum LocaleEnum {
  US_ENGLISH
}

"""
Autogenerated return type of Login
"""
type LoginPayload {
  accessToken: String!
  refreshToken: String!
  user: User!
}

"""
The mutation root of this schema
"""
type Mutation {
  """
  Exchange a refresh token for a new access token
  """
  deviceRefreshToken(refreshToken: String!): DeviceRefreshTokenPayload!

  """
  Obtain access tokens with user credentials
  """
  login(email: Email!, password: String!): LoginPayload!

  """
  Allow a user matching the given email to reset their password
  """
  userForgotPassword(email: Email!): Void

  """
  Reset password of user matching the given token
  """
  userResetPassword(password: String!, token: String!): UserResetPasswordPayload!
}

"""
An object with an ID
"""
interface Node {
  id: ID!
}

"""
An Int with a value >= 0
"""
scalar NonNegativeInt

"""
An object that represents a mutation problem
"""
interface Problem {
  """
  A human-readable description of the problem
  """
  message: String!

  """
  A path to the argument that caused the problem, may be empty
  """
  path: [String!]!
}

"""
The query root of this schema
"""
type Query {
}

"""
User
"""
type User implements HasTimestamps & Node {
  createdAt: ISO8601DateTime!
  devices: [Device!]!
  email: Email!
  firstName: String
  id: ID!
  lastName: String
  locale: LocaleEnum!
  passwordStale: Boolean
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated return type of UserResetPassword
"""
type UserResetPasswordPayload {
  problem: UserResetPasswordProblem
}

"""
Represents a problem with the userResetPassword mutation
"""
type UserResetPasswordProblem implements Problem {
  code: UserResetPasswordProblemCode!

  """
  A human-readable description of the problem
  """
  message: String!

  """
  A path to the argument that caused the problem, may be empty
  """
  path: [String!]!
}

"""
Problem code for the userResetPassword mutation
"""
enum UserResetPasswordProblemCode {
  """
  Occurs when the given token is invalid
  """
  INVALID_TOKEN
}

"""
A nil value
"""
scalar Void
